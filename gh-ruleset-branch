#!/usr/bin/env bash

# shellcheck shell=bash

######################################################################
#<
#
# Function: p6_usage()
#
#  Args:
#
#  Environment:	 EOF LC_ALL NAME OPTIND RULE WHAT
#>
######################################################################
p6_usage() {
  local rc="${1:-0}"
  local msg="${2:-}"

  if [ -n "$msg" ]; then
    echo >&2 "$msg"
  fi
  cat <<EOF
Usage:
  gh-ruleset-branch.zsh [options] <cmd> [<args>...]

Commands:
  activate <name>                Activate a branch ruleset
  create <name>                  Create a branch ruleset
  deactivate <name>              Deactivate a branch ruleset
  delete <name>                  Delete a branch ruleset
  show <name>                    Show a branch ruleset
  update <name> <what>=<value>   Update a branch ruleset

Options:
  -h                             Show this help message

Examples:
  gh-ruleset-branch.zsh activate "My Ruleset"
  gh-ruleset-branch.zsh create "My Ruleset"
  gh-ruleset-branch.zsh deactivate "My Ruleset"
  gh-ruleset-branch.zsh delete "My Rules"
  gh-ruleset-branch.zsh show "My Ruleset"
  gh-ruleset-branch.zsh update "My Ruleset" required_signatures=enabled
  gh-ruleset-branch.zsh update "My Ruleset" required_status_checks=disabled merge_method=squash required_approving_review_count=2
  gh-ruleset-branch.zsh update "My Ruleset" pull_request.required_approving_review_count=2 pull_request.dismiss_stale_reviews_on_push=true
  gh-ruleset-branch.zsh update "My Ruleset" conditions.include="~DEFAULT_BRANCH"
EOF
  exit "$rc"
}


######################################################################
#<
#
# Function: p6main()
#
#  Args:
#>
######################################################################
p6main() {
  shift 0

  # sanitize env
  LC_ALL=C

  # parse options
  local flag
  while getopts "h" flag; do
    case $flag in
    h) p6_usage 0 "help" ;;
    *) p6_usage 1 "invalid flag" ;;
    esac
  done
  shift $((OPTIND - 1))

  # grab command
  local cmd="$1"
  shift 1

  # security 101: only allow valid commands
  case $cmd in
  help) p6_usage ;;
  activate) ;;
  create) ;;
  deactivate) ;;
  delete) ;;
  show) ;;
  update) ;;
  *) p6_usage 1 "invalid cmd" ;;
  esac

  # exit if any cli errors w/ >0 return code
  # the commands can still disable locally if needed
  set -e
  p6_cmd_"${cmd}" "$@"
  set +e

  return 0
}

_jq_update() {
  local json_file="$1"
  local what="$2"
  local update="$3"
  local rule_fn="$4"

  if [ "$update" = "enabled" ]; then
    local rule="$($rule_fn)"
    jq --argjson RULE "$rule" '.rules += [$RULE] | .rules |= unique_by(.type)' < "$json_file"
  else
    jq --arg WHAT "$what" '.rules |= map(select(.type != $WHAT))' < "$json_file"
  fi
}

#############################################################################
_jq_toggle_rule() {
  local json_file="$1"
  local rule="$2"
  local state="$3"

  local tmp="${json_file}.new"
  rm -f "$tmp"

  if [ "$state" = "enabled" ]; then
    local rule_json
    rule_json="{ \"type\": \"${rule}\" }"

    # Pass JSON safely as string, parse inside jq using fromjson
    jq --arg R "$rule" --arg RULE "$rule_json" \
      '.rules = ((.rules // []) + [($RULE | fromjson)] | unique_by(.type))' \
      < "$json_file" > "$tmp"
  else
    jq --arg R "$rule" \
      '.rules = ((.rules // []) | map(select(.type != $R)))' \
      < "$json_file" > "$tmp"
  fi

  mv "$tmp" "$json_file"
}

_jq_set_rule_params() {
  local json_file="$1"
  local rule="$2"
  shift 2

  local tmp="${json_file}.new"

  # ensure skeleton exists
  jq --arg R "$rule" '
    (
      .rules = (.rules // [])
      | if any(.rules[]; .type == $R)
        then .
        else .rules += [{"type": $R, "parameters": {}}]
        end
    )
  ' < "$json_file" > "$tmp"
  mv "$tmp" "$json_file"

  # apply each k=v
  local kv
  for kv in "$@"; do
    local k="${kv%%=*}"
    local v="${kv#*=}"

    if [[ "$k" == "allowed_merge_methods" ]]; then
      jq --arg R "$rule" --arg K "$k" --argjson ARR "$(jq -nc --arg v "$v" '[ $v ]')" '
        .rules |= map(if .type==$R
                      then .parameters[$K]=$ARR
                      else . end)
      ' < "$json_file" > "$tmp"

    elif [[ "$v" =~ ^[0-9]+$ || "$v" == "true" || "$v" == "false" ]]; then
      jq --arg R "$rule" --arg K "$k" --argjson V "$v" '
        .rules |= map(if .type==$R
                      then (.parameters = (.parameters // {})) | (.parameters[$K]=$V)
                      else . end)
      ' < "$json_file" > "$tmp"

    else
      jq --arg R "$rule" --arg K "$k" --arg V "$v" '
        .rules |= map(if .type==$R
                      then (.parameters = (.parameters // {})) | (.parameters[$K]=$V)
                      else . end)
      ' < "$json_file" > "$tmp"
    fi

    mv "$tmp" "$json_file"
  done
}

_jq_set_conditions() {
  local json_file="$1"
  local include="$2"
  local exclude="$3"

  local tmp="${json_file}.new"

  jq --argjson INCLUDE "$(jq -nc --arg v "$include" '[ $v | select(length>0) ]')" \
     --argjson EXCLUDE "$(jq -nc --arg v "$exclude" '[ $v | select(length>0) ]')" '
    .conditions.ref_name = {
      include: (if $INCLUDE|length>0 then $INCLUDE else [] end),
      exclude: (if $EXCLUDE|length>0 then $EXCLUDE else [] end)
    }
  ' < "$json_file" > "$tmp"
  mv "$tmp" "$json_file"
}

_json_meta() {
  local name="$1"
  local id="$2"

  local id_json_clause
  if [ -n "$id" ]; then
    id_json_clause="\"id\": ${id},"
  else
    id_json_clause=""
  fi

  cat <<EOF
{
  ${id_json_clause}
  "name":"${name}",
  "target":"branch",
  "enforcement":"active"
}
EOF

  return
}

_gh() {

  gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "$@"
}

_p6_ruleset_id_by_name() {
  local name="$1"

  _gh repos/:owner/:repo/rulesets | jq -r --arg NAME "$name" '.[] | select(.name==$NAME) | .id' | head -1
}

######################################################################
#<
#
# Function: p6_cmd_activate(name)
#
#  Args:
#	name -
#
#  Environment:	 PUT
#>
######################################################################
p6_cmd_activate() {
  local name="$1"

  local id
  id="$(_p6_ruleset_id_by_name "$name")"
 _gh --method PUT "repos/:owner/:repo/rulesets/${id}" -f enforcement='active' 2>&1 | jq '{id,name,enforcement}'
}

######################################################################
#<
#
# Function: p6_cmd_deactivate(name)
#
#  Args:
#	name -
#
#  Environment:	 PUT
#>
######################################################################
p6_cmd_deactivate() {
  local name="$1"

  local id
  id="$(_p6_ruleset_id_by_name "$name")"
 _gh --method PUT "repos/:owner/:repo/rulesets/${id}" -f enforcement='disabled' 2>&1 | jq '{id,name,enforcement}'
}

######################################################################
#<
#
# Function: p6_cmd_create(name)
#
#  Args:
#	name -
#
#  Environment:	 POST
#>
######################################################################
p6_cmd_create() {
  local name="$1"

  local jf="/tmp/jf-create.json"
  _json_meta "$name" > "$jf"
   _gh --method POST repos/:owner/:repo/rulesets --input - <"$jf" 2>&1 | jq '{id,name,enforcement}'
   rm -f "$jf"
}

######################################################################
#<
#
# Function: p6_cmd_delete(name)
#
#  Args:
#	name -
#
#  Environment:	 DELETE
#>
######################################################################
p6_cmd_delete() {
  local name="$1"

  local id
  id="$(_p6_ruleset_id_by_name "$name")"

  _gh --method DELETE "repos/:owner/:repo/rulesets/${id}"
}

######################################################################
#<
#
# Function: p6_cmd_show(name)
#
#  Args:
#	name -
#
#  Environment:	 GET
#>
######################################################################
p6_cmd_show() {
  local name="$1"

  local id
  id="$(_p6_ruleset_id_by_name "$name")"
  _gh --method GET "repos/:owner/:repo/rulesets/${id}"
}

######################################################################
#<
#
# Function: p6_cmd_update(name, ...)
#
#  Args:
#	name -
#	... - 
#
#  Environment:	 GET PARAMS PUT
#>
######################################################################
p6_cmd_update() {
  local name="$1"
  shift 1

  local id
  id="$(_p6_ruleset_id_by_name "$name")"

  local jf="/tmp/jq.json"
  _gh --method GET "repos/:owner/:repo/rulesets/${id}" | jq '{id,name,enforcement,target,conditions,rules:(.rules//[])}' > "$jf"

  # parse args: toggles (rule=enabled|disabled) and params (rule.key=value)
  local arg
  local rule
  local key
  local val

  # collect per-rule params @PARAMS
  declare -A PARAMS
  while [ $# -gt 0 ]; do
    arg="$1";
    shift 1

    case "$arg" in
      conditions.include=*)
        include="${arg#*=}"
        ;;
      conditions.exclude=*)
        exclude="${arg#*=}"
        ;;
      *)
        rule="${arg%%=*}"
        val="${arg#*=}"

        if [[ "$rule" == *.* ]]; then
          rule="${rule%%.*}"
          key="${arg#*.}"
          key="${key%%=*}"
          PARAMS["$rule"]+="${PARAMS[$rule]:+ }$key=$val"
        else
          _jq_toggle_rule "$jf" "$rule" "$val"
        fi
        ;;
      esac
  done

  # apply condition update if set
  if [ -n "${include}${exclude}" ]; then
    _jq_set_conditions "$jf" "$include" "$exclude"
  fi

  # apply param sets
  for rule in "${!PARAMS[@]}"; do
    kvs=( ${PARAMS[$rule]} )
    _jq_set_rule_params "$jf" "$rule" "${kvs[@]}"
  done

  unset PARAMS

  _gh --method PUT "repos/:owner/:repo/rulesets/${id}" --input - < "$jf" | jq '{conditions,rules}'
}

p6main "$@"
